import random

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure

import sys
from os import path

import cv2
import numpy as np
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import numpy as np
import os
import six.moves.urllib as urllib
import sys
import tarfile
import tensorflow as tf
import zipfile
import time
import copy
import random
import pymysql
from PyQt5 import uic
from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image
import math
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure

from PyQt5 import QtCore #conda install pyqt
from PyQt5 import QtWidgets
import ftplib
import time


sys.path.append("..")

from utils import label_map_util

from utils import visualization_utils as vis_util

imgwidth = 480
imgheight = 360
yvalue = 0
xvalue = 0
frame = [0]
xpos = [[0]*1 for i in range(2)]
ypos = [[0]*1 for i in range(2)]
count = [[0]*1 for i in range(2)]
countsum = [0,0,0,0,0,0,0,0,0,0,0,0,0]
currentroomnum = 0 #현재방번호 0: 101 1 : 102
roomname = '101' #방번호
fsize = 400
line1 = 0
sf2 = 0
startflag = 0 #시작변수

cap = 0
f = 0
res =0
fgbg =0
kernel = 0
_ = 0
alphabg = 0
backbg =0
bg =0

class Login(QWidget):
    def __init__(self, parent):
        QWidget.__init__(self, parent)
        self.ui = uic.loadUi("WTC-Login.ui")
        self.ui.show()
        self.ui.btn1.clicked.connect(self.btn1_clicked)

    def btn1_clicked(self):
        QMessageBox.about(self, "잠시만 기다려주세요.", "로그인 되었습니다.")
        global startflag
        startflag = 1
        self.start = MyWindow(self)
        self.start.show()
        self.start.move(50,50)

form_class = uic.loadUiType("WTC-Main.ui")[0]

class Thread(QtCore.QThread):
    personcount = QtCore.pyqtSignal(list)
    changePixmap1 = pyqtSignal(QPixmap)
    changePixmap2 = pyqtSignal(QPixmap)
    changePixmap3 = pyqtSignal(QPixmap)
    changePixmap4 = pyqtSignal(QPixmap)

    def __init__(self, parent=None):
        super(Thread, self).__init__(parent)

    def run(self):
        # What model to download.
        MODEL_NAME = 'ssdlite_mobilenet_v2_coco_2018_05_09'
        MODEL_FILE = MODEL_NAME + '.tar.gz'
        DOWNLOAD_BASE = 'http://download.tensorflow.org/models/object_detection/'

        # Path to frozen detection graph. This is the actual model that is used for the object detection.
        PATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'

        # List of the strings that is used to add correct label for each box.
        PATH_TO_LABELS = os.path.join('data', 'mscoco_label_map.pbtxt')

        NUM_CLASSES = 90

        # ## Download Model

        # In[ ]:

        #ftp서버
        ftp = ftplib.FTP("112.175.184.69")
        ftp.login("surk0130", "rootpass123123")  # login (ID, Password)
        ftp.cwd("/html/image/")  # 파일 전송할 Ftp 주소 (받을 주소)
        os.chdir(r"C:\Users\hwi\Anaconda3\envs\tensorflow\models\object_detection")  # 파일 전송 대상의 주소(보내는 주소)

        opener = urllib.request.URLopener()
        opener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)
        tar_file = tarfile.open(MODEL_FILE)
        for file in tar_file.getmembers():
            file_name = os.path.basename(file.name)
            if 'frozen_inference_graph.pb' in file_name:
                tar_file.extract(file, os.getcwd())

        # ## Load a (frozen) Tensorflow model into memory.

        # In[ ]:


        detection_graph = tf.Graph()
        with detection_graph.as_default():
            od_graph_def = tf.GraphDef()
            with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
                serialized_graph = fid.read()
                od_graph_def.ParseFromString(serialized_graph)
                tf.import_graph_def(od_graph_def, name='')

        # ## Loading label map
        # Label maps map indices to category names, so that when our convolution network predicts `5`, we know that this corresponds to `airplane`.  Here we use internal utility functions, but anything that returns a dictionary mapping integers to appropriate string labels would be fine

        # In[ ]:


        label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
        categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES,
                                                                    use_display_name=True)
        category_index = label_map_util.create_category_index(categories)

        # ## Helper code

        # In[ ]:


        def load_image_into_numpy_array(image):
            (im_width, im_height) = image.size
            return np.array(image.getdata()).reshape(
                (im_height, im_width, 3)).astype(np.uint8)

        def hconcat_resize_min(im_list, interpolation=cv2.INTER_CUBIC):
            h_min = min(im.shape[0] for im in im_list)
            im_list_resize = [
                cv2.resize(im, (int(im.shape[1] * h_min / im.shape[0]), h_min), interpolation=interpolation)
                for im in im_list]
            return cv2.hconcat(im_list_resize)

        # For the sake of simplicity we will use only 2 images:
        # image1.jpg
        # image2.jpg
        # If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.
        PATH_TO_TEST_IMAGES_DIR = 'test_images'
        TEST_IMAGE_PATHS = [os.path.join(PATH_TO_TEST_IMAGES_DIR, 'img{}.jpg'.format(i)) for i in range(1, 3)]

        # Size, in inches, of the output images.
        IMAGE_SIZE = (12, 8)

        # ---------------------------------------------- matplot
        # 그래프 그리기
        # 그래프 값
        framesize = 0

        # ---------------------- excel,mysql
        #MySQL Connection 연결
        conn = pymysql.connect(host='localhost', user='root', password='rootpass',
                              db='testdb', charset='utf8')

        #Connection 으로부터 Cursor 생성
        curs = conn.cursor()
        sql = "insert into testtable(roomname,people,x,y) values (%s,%s,%s,%s)"

        # ----------------------- opencv
        filename = '101'
        global roomname
        global cap
        cap = cv2.VideoCapture(roomname+'.avi')  # 'experiment/'+filename+'.avi'
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        out = cv2.VideoWriter(filename + '_out_rcnninception.avi', fourcc, 20.0, (imgwidth, imgheight))

        countsecond = 1  # 초세기
        personcount = 0  # 사람수

        # detection
        Detectflag = True  # 디텍션 이프문 처음에만 들어가기

        # 영상 블러처리 -히트맵
        start = 1
        duration = 10
        fps = '30'

        global f
        global res
        global fgbg
        global kernel
        global _
        global bg
        #hitmap
        _, f = cap.read()
        bg = copy.deepcopy(f)
        f = cv2.cvtColor(f, cv2.COLOR_BGR2GRAY)
        f = cv2.GaussianBlur(f, (11, 11), 2, 2)
        res = 0.05 * f
        res = res.astype(np.float64)

        fgbg = cv2.createBackgroundSubtractorMOG2(history=1, varThreshold=100,
                                                  detectShadows=True)

        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (13, 13))

        global backbg
        bg = cv2.resize(bg, (imgwidth, imgheight))
        bg = cv2.cvtColor(bg, cv2.COLOR_BGR2GRAY)
        bg = copy.deepcopy(cv2.cvtColor(bg, cv2.COLOR_GRAY2RGB))  # 흑백으로 바꿨다 컬러로
        backbg = copy.deepcopy(bg)

        threadtime = 0.5 #스레드시간
        threadtimesum = 0 #스레드 시간 합
        with detection_graph.as_default():
            with tf.Session(graph=detection_graph) as sess:
                while True:
                    self.sleep(threadtime)
                    threadtimesum += threadtime
                    print(threadtimesum)
                    ret, image_np = cap.read()
                    image_np3 = copy.deepcopy(image_np)  # 1번화면 히트맵에 복사

                    # 히트맵 그리기
                    fgmask = fgbg.apply(image_np3, None, 0.01)
                    gray = cv2.cvtColor(image_np3, cv2.COLOR_BGR2GRAY)
                    gray = cv2.GaussianBlur(gray, (11, 11), 2, 2)
                    gray = gray.astype(np.float64)
                    fgmask = cv2.morphologyEx(fgmask, cv2.MORPH_CLOSE, kernel)
                    fgmask = fgmask.astype(np.float64)
                    res += (40 * fgmask + gray) * 0.01
                    res_show = res / res.max()
                    res_show = np.floor(res_show * 255)
                    res_show = res_show.astype(np.uint8)
                    res_show = cv2.applyColorMap(res_show, cv2.COLORMAP_JET)

                    image_np = cv2.resize(image_np, (imgwidth, imgheight))  # 사이즈 수정

                    image_np2 = copy.deepcopy(image_np)  # 1번화면 2번에복사

                    # 20초마다 디텍션하기
                    if (Detectflag == True or (threadtimesum) % 30 == 0):
                        Detectflag = False
                        threadtimesum = 0
                        print(threadtimesum)
                        personcount = 0  # 사람카운트 초기화

                        # the array based representation of the image will be used later in order to prepare the
                        # result image with boxes and labels on it.
                        # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
                        image_np_expanded = np.expand_dims(image_np2, axis=0)
                        image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
                        # Each box represents a part of the image where a particular object was detected.
                        boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
                        # Each score represent how level of confidence for each of the objects.
                        # Score is shown on the result image, together with the class label.
                        scores = detection_graph.get_tensor_by_name('detection_scores:0')
                        classes = detection_graph.get_tensor_by_name('detection_classes:0')
                        num_detections = detection_graph.get_tensor_by_name('num_detections:0')
                        # Actual detection.
                        (boxes, scores, classes, num_detections) = sess.run(
                            [boxes, scores, classes, num_detections],
                            feed_dict={image_tensor: image_np_expanded})
                        # Visualization of the results of a detection.
                        vis_util.visualize_boxes_and_labels_on_image_array(
                            image_np2,
                            np.squeeze(boxes),
                            np.squeeze(classes).astype(np.int32),
                            np.squeeze(scores),
                            category_index,
                            use_normalized_coordinates=True,
                            line_thickness=8)

                        threshold = 0.5  # 0.5이상만 보여주기
                        global currentroomnum
                        for index, value in enumerate(classes[0]):
                            ymin = boxes[0][index][0] * imgheight
                            xmin = boxes[0][index][1] * imgwidth
                            ymax = boxes[0][index][2] * imgheight
                            xmax = boxes[0][index][3] * imgwidth
                            personclassname = (category_index.get(value)).get('name')
                            widthvalue = int((xmax - xmin) / 2)  # width 길이
                            heightvalue = int((ymax - ymin) / 2)  # height 길이
                            if scores[0, index] > threshold and personclassname == 'person':
                                personcount = personcount + 1
                                countsum[currentroomnum] += personcount
                                curs.execute(sql, (roomname,personcount,int(xmin),int(ymin)))  # 사람 수 저장함.
                                count[currentroomnum].append(personcount)
                                xpos[currentroomnum].append(xmin)
                                ypos[currentroomnum].append(ymin)
                                conn.commit()
                                bg = cv2.circle(bg, (int((xmax + xmin) / 2), int((ymax + ymin) / 2)), 25, (0, 0, 255),
                                                -1)  # 사람 좌표 표시

                        convertimg = copy.deepcopy(image_np2)  # objectdetection 적용된이미지
                        #ftp 서버에 저장
                        # now = time.localtime()
                        # filename = "%02d-%02d-%02d-%02d-%02d.jpg" % (now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

                        global alphabg
                        alphabg = copy.deepcopy(bg)
                        cv2.addWeighted(backbg, 0.6, alphabg, 1 - 0.6, 0, alphabg)  # 그린 것 반투명처리

                        filename1 = roomname+"-1.jpg"
                        filename2 = roomname+"-2.jpg"
                        cv2.imwrite(filename1, res_show)
                        cv2.imwrite(filename2, alphabg)
                        myfile = open(filename1, 'rb')  # Open( ~ ,'r') <= Text파일은 됨, Open( ~ ,'rb') <= 이미지파일 됨
                        ftp.storbinary('STOR ' + filename1, myfile)
                        myfile = open(filename2, 'rb')  # Open( ~ ,'r') <= Text파일은 됨, Open( ~ ,'rb') <= 이미지파일 됨
                        ftp.storbinary('STOR ' + filename2, myfile)

                    # cv2.imshow('히트맵그리기', res_show)

#                    horizontalimg = hconcat_resize_min([image_np, convertimg, res_show])

                    # fig.savefig("fall1_out_rcnninception.png") #matplot 이미지 저장
                    # wb.save(filename+'_out_rcnninception.xlsx')  # 엑셀에 저장
                    # cv2.imshow('object_detection', numpy_horizontal)



                    cv2.resize(image_np,(360,240))
                    cv2.resize(res_show,(360,240))
                    rgbImage1 = cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB)
                    convertToQtFormat = QImage(rgbImage1.data, rgbImage1.shape[1], rgbImage1.shape[0],
                                               QImage.Format_RGB888)
                    convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
                    p1 = convertToQtFormat.scaled(360, 240, Qt.KeepAspectRatio)

                    rgbImage2 = cv2.cvtColor(convertimg, cv2.COLOR_BGR2RGB)
                    convertToQtFormat = QImage(rgbImage2.data, rgbImage2.shape[1], rgbImage2.shape[0],
                                               QImage.Format_RGB888)
                    convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
                    p2 = convertToQtFormat.scaled(imgwidth, imgheight, Qt.KeepAspectRatio)

                    rgbImage3 = cv2.cvtColor(res_show, cv2.COLOR_BGR2RGB)
                    convertToQtFormat = QImage(rgbImage3.data, rgbImage3.shape[1], rgbImage3.shape[0],
                                               QImage.Format_RGB888)
                    convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
                    p3 = convertToQtFormat.scaled(360, 240, Qt.KeepAspectRatio)

                    rgbImage4 = cv2.cvtColor(alphabg, cv2.COLOR_BGR2RGB)
                    convertToQtFormat = QImage(rgbImage4.data, rgbImage4.shape[1], rgbImage4.shape[0],
                                               QImage.Format_RGB888)
                    convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
                    p4 = convertToQtFormat.scaled(imgwidth, imgheight, Qt.KeepAspectRatio)

                    self.changePixmap1.emit(p1)
                    self.changePixmap2.emit(p2)
                    self.changePixmap3.emit(p3)
                    self.changePixmap4.emit(p4)
                    self.personcount.emit(count[currentroomnum])

class MyWindow(QMainWindow,form_class):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        if startflag == 0:
            self.login = Login(self)
        else:
            self.mywindow()

    def mywindow(self):
        self.setupUi(self)

        self.label1.resize(imgwidth, imgheight)

        self.figure = Figure()
        self.canvas = FigureCanvasQTAgg(self.figure)

        self.axis1 = self.figure.add_subplot(211)
        self.axis1.grid(True)
        self.axis1.set_ylabel("count")

        self.sf2 = self.figure.add_subplot(212)
        self.sf2.set_ylabel("location")
        self.sf2.set_xlim(0, imgwidth)  # 그래프 처음끝값
        self.sf2.set_ylim(imgheight, 0)
        self.sf2.grid(True)

        self.plotlayout.addWidget(self.canvas)

        # 디텍션 스레드
        self.th = Thread(parent=self)
        self.th.changePixmap1.connect(self.label1.setPixmap)
        self.th.changePixmap2.connect(self.label2.setPixmap)
        self.th.changePixmap3.connect(self.label3.setPixmap)
        self.th.changePixmap4.connect(self.label4.setPixmap)
        self.th.personcount.connect(self.on_threadSample_newSample)
        self.th.start()

        self.btn101.clicked.connect(self.btn101_clicked)
        self.btn102.clicked.connect(self.btn102_clicked)
        self.btn103.clicked.connect(self.btn101_clicked)
        self.btn104.clicked.connect(self.btn101_clicked)
        self.btn105.clicked.connect(self.btn101_clicked)
        self.btn106.clicked.connect(self.btn101_clicked)
        self.btn107.clicked.connect(self.btn101_clicked)
        self.btn201.clicked.connect(self.btn101_clicked)
        self.btn202.clicked.connect(self.btn101_clicked)
        self.btn203.clicked.connect(self.btn101_clicked)
        self.btn204.clicked.connect(self.btn101_clicked)
        self.btn205.clicked.connect(self.btn101_clicked)
        self.btn206.clicked.connect(self.btn101_clicked)

    def btn101_clicked(self):
        global cap
        global roomname
        roomname = '101'
        cap =  cv2.VideoCapture('101.avi')
        print("버튼101")

        # hitmap
        global f
        global res
        global fgbg
        global kernel
        global _
        global bg
        _, f = cap.read()
        bg = copy.deepcopy(f)
        f = cv2.cvtColor(f, cv2.COLOR_BGR2GRAY)
        f = cv2.GaussianBlur(f, (11, 11), 2, 2)
        res = 0.05 * f
        res = res.astype(np.float64)

        fgbg = cv2.createBackgroundSubtractorMOG2(history=1, varThreshold=100,
                                                  detectShadows=True)

        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (13, 13))

        # alpha
        global backbg
        bg = cv2.resize(bg, (imgwidth, imgheight))
        bg = cv2.cvtColor(bg, cv2.COLOR_BGR2GRAY)
        bg = copy.deepcopy(cv2.cvtColor(bg, cv2.COLOR_GRAY2RGB))  # 흑백으로 바꿨다 컬러로
        backbg = copy.deepcopy(bg)

        self.btn101.setStyleSheet("background-color:rgb(255,0,0); color:rgb(255,255,255)")
        self.btn102.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn103.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn104.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn105.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn106.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn107.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn201.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn202.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn203.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn204.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn205.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn206.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn101.setStyleSheet("background-color:rgb(255,0,0); color:rgb(255,255,255)")
        self.listbtn102.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn103.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn104.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn105.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn106.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn107.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn201.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn202.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn203.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn204.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn205.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn206.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.currentvalue.setText("현재 : 101")

        global currentroomnum
        currentroomnum = 0
        self.axis1.cla()
        self.axis1.grid(True)
        self.sf2.cla()  # 그래프리셋
        self.sf2.grid(True)
        self.sf2.set_xlim(0, imgwidth)  # 그래프 처음끝값
        self.sf2.set_ylim(imgheight, 0)

        totalsum = 0
        global countsum
        for i in range(len(countsum)):
            totalsum += countsum[i]
        self.probar101.setValue(int(countsum[0] / totalsum * 100))
        self.probar102.setValue(int(countsum[1] / totalsum * 100))
        self.probar103.setValue(int(countsum[2] / totalsum * 100))
        self.probar104.setValue(int(countsum[3] / totalsum * 100))
        self.probar105.setValue(int(countsum[4] / totalsum * 100))
        self.probar106.setValue(int(countsum[5] / totalsum * 100))
        self.probar107.setValue(int(countsum[6] / totalsum * 100))
        self.probar201.setValue(int(countsum[7] / totalsum * 100))
        self.probar202.setValue(int(countsum[8] / totalsum * 100))
        self.probar203.setValue(int(countsum[9] / totalsum * 100))
        self.probar204.setValue(int(countsum[10] / totalsum * 100))
        self.probar205.setValue(int(countsum[11] / totalsum * 100))
        self.probar206.setValue(int(countsum[12] / totalsum * 100))

    def btn102_clicked(self):
        global cap
        global roomname
        roomname = '102'
        cap =  cv2.VideoCapture('102.avi')
        print("버튼102")

        #hitmap
        global f
        global res
        global fgbg
        global kernel
        global _
        global bg
        _, f = cap.read()
        bg=copy.deepcopy(f)
        f = cv2.cvtColor(f, cv2.COLOR_BGR2GRAY)
        f = cv2.GaussianBlur(f, (11, 11), 2, 2)
        res = 0.05 * f
        res = res.astype(np.float64)

        fgbg = cv2.createBackgroundSubtractorMOG2(history=1, varThreshold=100,
                                                  detectShadows=True)

        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (13, 13))

        #alpha
        global backbg
        bg = cv2.resize(bg, (imgwidth, imgheight))
        bg = cv2.cvtColor(bg, cv2.COLOR_BGR2GRAY)
        bg = copy.deepcopy(cv2.cvtColor(bg, cv2.COLOR_GRAY2RGB))  # 흑백으로 바꿨다 컬러로
        backbg = copy.deepcopy(bg)

        self.btn101.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.btn102.setStyleSheet("background-color:rgb(255,0,0); color:rgb(255,255,255)")
        # self.btn103.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn104.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn105.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn106.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn107.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn201.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn202.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn203.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn204.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn205.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.btn206.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn101.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.listbtn102.setStyleSheet("background-color:rgb(255,0,0); color:rgb(255,255,255)")
        # self.listbtn103.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn104.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn105.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn106.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn107.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn201.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn202.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn203.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn204.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn205.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        # self.listbtn206.setStyleSheet("background-color:rgb(33,150,246); color:rgb(255,255,255)")
        self.currentvalue.setText("현재 : 102")

        global currentroomnum
        currentroomnum = 1
        self.axis1.cla()
        self.axis1.grid(True)
        self.sf2.cla()  # 그래프리셋
        self.sf2.grid(True)
        self.sf2.set_xlim(0, imgwidth)  # 그래프 처음끝값
        self.sf2.set_ylim(imgheight, 0)

        totalsum = 0
        global countsum
        for i in range(len(countsum)):
            totalsum += countsum[i]
        self.probar101.setValue(int(countsum[0] / totalsum*100))
        self.probar102.setValue(int(countsum[1] / totalsum*100))
        self.probar103.setValue(int(countsum[2] / totalsum * 100))
        self.probar104.setValue(int(countsum[3] / totalsum * 100))
        self.probar105.setValue(int(countsum[4] / totalsum * 100))
        self.probar106.setValue(int(countsum[5] / totalsum * 100))
        self.probar107.setValue(int(countsum[6] / totalsum * 100))
        self.probar201.setValue(int(countsum[7] / totalsum * 100))
        self.probar202.setValue(int(countsum[8] / totalsum * 100))
        self.probar203.setValue(int(countsum[9] / totalsum * 100))
        self.probar204.setValue(int(countsum[10] / totalsum * 100))
        self.probar205.setValue(int(countsum[11] / totalsum * 100))
        self.probar206.setValue(int(countsum[12] / totalsum * 100))


    @QtCore.pyqtSlot(list)
    def on_threadSample_newSample(self, sample):
    #     self.sf.plot(sample)
    #     #self.line1.set_xdata(frame)

         self.sf2.scatter(xpos[currentroomnum], ypos[currentroomnum])  # 위치 표시
         self.axis1.plot(sample)
         self.canvas.draw()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    tt = MyWindow()
    #tt.show()
    app.exec_()
